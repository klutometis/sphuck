# -*- mode: org;-*-
* TODO every invocation of READ will instantiate a new reader,
  and reset the stream to the end of the last successfully read token;
  persistent readers, on the other hand, will have a READ method
  that can be invoked until EOF with a popped lookahead-token.
* TODO how are we going to fucking implement READ on a stream, though,
  without some kind of stream-rewinding? the lexer-token-stack trick
  allows the lexer to exhaust the stream.
** TODO for each READ, reset the stream to the end of the last successful token;
 kkkkkkk;aaaaa3   either reset the state of the current lexer, or invoke a new one.
* DONE a read that stops after one expression
  CLOSED: [2009-06-16 Tue 15:09]
** DONE may be able to modify parse() to stop after encountering a <datum>
   CLOSED: [2009-06-16 Tue 15:09]
* DONE put a token back in the stream on %parse_accept via callback
  CLOSED: [2009-06-16 Tue 15:08]
  - CLOSING NOTE [2009-06-16 Tue 15:09] \\
    callback pushes the lookahead token back on the stack
** DONE we have the fucking token; if we reset the stream, the token
   CLOSED: [2009-06-16 Tue 15:08]
   - CLOSING NOTE [2009-06-16 Tue 15:08] \\
     modified next_token to use the stack trick; v. infra
   has to be lexed all over again. best reset within parser.
** What Axioplase has to say:
   00:55 < Axioplase> eek
   00:55 < Axioplase> Have a dequeue
   00:55 < Axioplase> Or something like that
   00:56 < Axioplase> (peek stream) ;; returns top of (embedded) stack, or lex a token
   00:57 < Axioplase> (unpeek token stream) ;; put token on top of stack, do not touch the stream
   00:57 < Axioplase> There you go.
   01:03 < Axioplase> Though an LR parser should not backtrack at all and thus, your problem should disappear :)
   01:04 < Axioplase> lowlycoder: wow. Err, read the page of the "official" GNU APL interpreter.
   01:02 < Axioplase> (unlike what some could infer for my second line, it's not a dequeue by the way)
* CANCELED holy shit: it's up to the lexer to declare Sphuck(0) and terminate
  CLOSED: [2009-06-15 Mon 23:20]
  - CLOSING NOTE [2009-06-15 Mon 23:20] \\
    %parse_accept
  the datum.
* TODO StringReader -> StringStream for when we need to perform reading
  and writing; e.g. with-output-to-string.
* TODO might need to have some kind of file abstraction for ports of the form
  port://<type>/<handle>; port://string/<key>; part://file/<file>,
  etc., so that i can automatically dish out EOF objects
* TODO bootstrapping: writes itself in scheme; compiles itself; uses
  itself: some phase exists with a hand-written compiler that is
  usurped; some form thereafter of asymptotic progress?
* DONE dealing with the limitations of PHP by introducing expensive
  CLOSED: [2009-06-15 Mon 23:19]
  - CLOSING NOTE [2009-06-15 Mon 23:19] \\
    it's true
  abstractions (Pair, etc.).
* TODO might be able to optimize lists later by using native structures:
  arrays or some C garbage
* TODO [#A] datum parsing (READ) can be orthogonal to expression parsing; in
  other words, we can do program parsing in the parser, too, without
  dropping down into proto-scheme.
** TODO the metacirc eval contains an implicit expression parser
* TODO bootstrap psyntax with procedural ors, etc. (the minimum); post-psyntax,
  redefine them as syntax abstractions?
* TODO lexer-* -> lexer/; parser-* -> parser/
* CANCELED could have persistent parsers/lexers, and avoid instantiating one
  CLOSED: [2009-06-15 Mon 23:19]
  - CLOSING NOTE [2009-06-15 Mon 23:19] \\
    streams
  for every parse transaction.
* TODO r5rs 3.3: "The integer 28 also has representations "#e28.000"...."
  there is, therefor, an implicit conversion to int? all the more
  reason to compute the number-type predicates.
* TODO set up an abstract parser with a built-in $datum? might have to modify
  lempar.php
* TODO we're sidestepping promotion and demotion along a number stack
  by keeping everything complex: at hideous cost of speed, of course.
* TODO might have to use scheme numbers as early as decimal so
  as to be able to dictate exactness.
* TODO r5rs 6.2.4: "it is inexact if it contains a decimal point,
  an exponent, or a "#" character in the place of a digit, otherwise
  it is exact.
* CANCELED reuse the same parser with binary, octal, decimal and hex lexers;
  CLOSED: [2009-06-15 Mon 23:18]
  - CLOSING NOTE [2009-06-15 Mon 23:18] \\
    nope
  specialize the parser by lexer and radix (for string -> number
  conversion).

  probably don't need parser utils in that case.
* TODO override exactness when octothorpes are present
* TODO shouldn't integer(), rational(), imaginary(), etc. take over the
  burden of composite exactness?
* TODO here we are, dealing with types and promotion again; sticky; and
  weren't there unpromotables?
* DONE it turns out the exactness of the real and imaginary parts
  CLOSED: [2009-06-15 Mon 23:18]
  - CLOSING NOTE [2009-06-15 Mon 23:18] \\
    yup
  are orthogonal; the composite exactness in conjunctive.
* TODO the imaginary part has an imaginary part, oddly, of NaN;
  only way to solve the recursion might be to formalize
  imaginary_numerator, imaginary_denominator.

  have to have an imaginary_exactness, though; why not number as a
  composite of rationals + production

  fuck it: it will be a special case; what, on the other hand, if we
  want to do arithmetic on the imaginary part? it's a defective
  number.

  the trouble is, really, that the imaginary part itself has an
  imaginary part (though possibly nullary)

  we could define real as the case in which complex part is 0 or NaN,
  but then we have to special-case all of the operations.

  could we define zero as some sort of infinite production?

  yes: define a fucking imag_part function which special cases
  imaginary NaN as zero.

  the operations take care of the imaginary -> real; still ad hoc
  though; would have to be painfully generalized for quaternions. fuck
  it.
* TODO if i want to stray from a unified number system for optimization,
  though, going to have to juggle types myself; or resort to native
  objectivism.
* TODO a tolerance/precision is required when invoking an irrational, such
  that it becomes a rational when actualized.

  pi as (* 4 (atan 1)) until actualized.
* DONE r5rs 6.2.5: "the denominator of 0 is defined to be 1"
  CLOSED: [2009-05-19 Tue 00:05]
  - CLOSING NOTE [2009-05-19 Tue 00:05] \\
    zero()
* TODO r5rs 6.2.5: "the denominator is always positive"
* DONE you'll still have a radix non-terminal even if it's blank
  CLOSED: [2009-06-15 Mon 23:18]
  - CLOSING NOTE [2009-06-15 Mon 23:18] \\
    yup
* TODO the gradual parsing of number information: exactness before uinteger
  before sign, is why i'd like to have a unified number type that
  responds to type queries computationally.

  It would therefore have numerator, denominator, imaginary part;
  which may or may not be nullary. Imaginary part itself a Number.
* TODO honest irrational numbers with production functions and
  no bound on precision
* DONE kleene star can't be done in lexer, it seems; endless loop on
  CLOSED: [2009-06-15 Mon 23:17]
  - CLOSING NOTE [2009-06-15 Mon 23:17] \\
    yup
  blank string.
* DONE there is some ambiguity between UREAL_10 qua UINTEGER_10 and
  CLOSED: [2009-06-15 Mon 23:17]
  - CLOSING NOTE [2009-06-15 Mon 23:17] \\
    yup
  DECIMAL_10 qua UINTEGER_10 + nullary SUFFIX
* DONE it may well be profitable to delay the creating of schemelike
  CLOSED: [2009-06-15 Mon 23:17]
  - CLOSING NOTE [2009-06-15 Mon 23:17] \\
    sure
  structures as long as possible (may not be able to delay them beyond
  the parser, though: exactness, etc.)
* DONE holy shit! lexers can follow the lexical formalisms
  CLOSED: [2009-06-15 Mon 23:17]
  - CLOSING NOTE [2009-06-15 Mon 23:17] \\
    indeed
  more or less verbatim!
** TODO does the parser admit of states? or do i have to have
   an ad-hoc parser that corresponds to each lexer state?
* DONE [#A] integrate decimal last? seems to be a weird case
  CLOSED: [2009-06-15 Mon 23:17]
  - CLOSING NOTE [2009-06-15 Mon 23:17] \\
    yup
** CANCELED in particular, handle other numbers first; might be able
   CLOSED: [2009-06-15 Mon 23:17]
   - CLOSING NOTE [2009-06-15 Mon 23:17] \\
     nope
   to combine them into one number parser
* DONE identify problematic things (like decimal) in the lexer;
  CLOSED: [2009-06-15 Mon 23:16]
  - CLOSING NOTE [2009-06-15 Mon 23:16] \\
    yup
  have a subparser to handle it.
* DONE could have a separate number parser with special cases
  CLOSED: [2009-06-15 Mon 23:16]
  - CLOSING NOTE [2009-06-15 Mon 23:16] \\
    had to fucking do that, actually
  for E, S, F, D, L, etc.; wonder if that can be simulated with
  states?
* TODO every non-terminal a test?
* TODO parser tests: all the samples from r5rs?
* DONE why not do the scheme conversion at the last minute,
  CLOSED: [2009-06-15 Mon 23:16]
  - CLOSING NOTE [2009-06-15 Mon 23:16] \\
    ok
  so as to be able to manipulate value, sign, etc. efficiently?
* DONE jumped the gun on the exactness question (wait for
  CLOSED: [2009-06-15 Mon 23:16]
  - CLOSING NOTE [2009-06-15 Mon 23:16] \\
    yes
  prefix)
* CANCELED should the stack_to_* function return actual scheme
  CLOSED: [2009-06-15 Mon 23:16]
  - CLOSING NOTE [2009-06-15 Mon 23:16] \\
    nope
  values
* CANCELED becaus we're not using complex regexps in the lexer,
  CLOSED: [2009-06-15 Mon 23:16]
  - CLOSING NOTE [2009-06-15 Mon 23:16] \\
    nope
  we might have to use states to distinguish between #e10 the
  exponent, and #e the exact sign.
* CANCELED move utilities such as map into their own file (not pair)
  CLOSED: [2009-06-15 Mon 23:16]
* CANCELED non-terminals to have a label?
  CLOSED: [2009-06-15 Mon 23:15]
  - CLOSING NOTE [2009-06-15 Mon 23:15] \\
    nah
* DONE we can signify somewhere in the parser that a datum has
  CLOSED: [2009-06-15 Mon 23:14]
  - CLOSING NOTE [2009-06-15 Mon 23:15] \\
    might do a callback instead; although: %parse_accept
  been read; then the lexer can stop taking from the input stream.
* CANCELED might need an identifier/class for each of the non-terminals
  CLOSED: [2009-06-15 Mon 23:14]
  - CLOSING NOTE [2009-06-15 Mon 23:14] \\
    nah
* DONE generate the fucking parse tree; not this worthless embedded
  CLOSED: [2009-06-15 Mon 23:14]
  - CLOSING NOTE [2009-06-15 Mon 23:14] \\
    ok
  stack shit.
* CANCELED sig figs may be worthless; but what about an uncertainty
  CLOSED: [2009-06-15 Mon 23:14]
  - CLOSING NOTE [2009-06-15 Mon 23:14] \\
    nah
  parameter?
* CANCELED do math with gmp ints and exponents? but why not then just
  CLOSED: [2009-06-15 Mon 23:14]
  - CLOSING NOTE [2009-06-15 Mon 23:14] \\
    might need to implement gmp float
  implement the damn float libs?
* DONE either create containers for digits/octothorpes or sentinels
  CLOSED: [2009-06-15 Mon 23:14]
  - CLOSING NOTE [2009-06-15 Mon 23:14] \\
    nah; 0
  to mark having seen a digits{0}.
* DONE can possibly call a yy_*() function after parsing a <datum>?
  CLOSED: [2009-06-15 Mon 23:13]
  - CLOSING NOTE [2009-06-15 Mon 23:13] \\
    %parse_accept
* DONE how do we want to represent numbers: 1 <= x < 2 plus exponent?
  CLOSED: [2009-06-15 Mon 23:13]
  - CLOSING NOTE [2009-06-15 Mon 23:13] \\
    no
* DONE there seem to be rigorous boundaries to groups delineated
  CLOSED: [2009-06-15 Mon 23:13]
  - CLOSING NOTE [2009-06-15 Mon 23:13] \\
    don't
  by digits{0}, octothorpes{0}, etc. Hmm; digit never seems to get
  matched with recursive rules around. (Because digit is decomposed
  into terminals.)
* DONE is there a systematic way to delegate lexer/parser
  CLOSED: [2009-06-15 Mon 23:13]
  - CLOSING NOTE [2009-06-15 Mon 23:13] \\
    no
  responsibilities?

  i could at least enlist regular expressions to take care of + and *,
  couldn't I? otherwise, the gathering is laborious.
* DONE do we need the level of indirection of JLexToken, or how else
  CLOSED: [2009-06-15 Mon 23:13]
  - CLOSING NOTE [2009-06-15 Mon 23:13] \\
    yes
  gather type + value?
* DONE things tokenized have to been resynthesized in the parser;
  CLOSED: [2009-06-15 Mon 23:12]
  - CLOSING NOTE [2009-06-15 Mon 23:12] \\
    not that bad with a complex lexer, actually
  non-terminal, specifically, should gather preceding terminals?
  Otherwise, decimal, for instance, would have aware of exponents,
  signs, etc.

  Don't really gain any advantage over complex regular expressions in
  the parser which have to be unsynthesized post-hoc: still have to
  assemble the digit/octothorpe soup in the stack, for instance, and
  segregate.
* DONE some things like . <digit 10>+ #* <suffix> trivial with regular
  CLOSED: [2009-06-15 Mon 23:12]
  - CLOSING NOTE [2009-06-15 Mon 23:12] \\
    v. infra
  expressions; not so much with formal grammars; make exceptions for
  complex expressions in the lexer, decompose in the parser?
* DONE parser only really cares about identifier, boolean, number,
  CLOSED: [2009-06-15 Mon 23:12]
  - CLOSING NOTE [2009-06-15 Mon 23:12] \\
    v. infra
  character, string from lexical analysis (some delimiters here and
  there). Really, only cares about tokens. Can do all the token work
  in the lexer; percolate up tokens to the parser?
* DONE looks like we could also leave the parser bare, and do all the object
  CLOSED: [2009-06-15 Mon 23:12]
  - CLOSING NOTE [2009-06-15 Mon 23:12] \\
    v. infra
  generation in the lexer; that way, we can propagate abstracta to the
  parser.

  as long as i have macros, can do some abstraction in the lexer; use
  parser for verification?
* DONE actually: since we're merely generating php, we can do the lexing
  CLOSED: [2009-06-15 Mon 23:12]
  - CLOSING NOTE [2009-06-15 Mon 23:12] \\
    v. infra
  and parsing in any fucking language we want: haskell, scheme, etc.;
  add a php driver.

  oh, fuck; it's nice to have good tools. thanks, wez furlong.
* DONE my main problem has to do with the contextual parsing of overlapping
  CLOSED: [2009-06-15 Mon 23:12]
  - CLOSING NOTE [2009-06-15 Mon 23:12] \\
    complex lexer, multiple parsers
  atoms; i is a letter in one context, but signifies imaginary in
  another; set up states?

  even if i have sloppy grouping (complex R, for instance), and have
  to do another round of parsing to extract its...

  fuck it; we're going back to: lexer: terminals; parser:
  non-terminals, no matter how painful the non-terminals are in BNF.
** TODO one rule to seed each recursion; another to recurse.
** TODO can overload tokens, too: DIGIT token whose value can be: 0, 1, ...;
   nope: have to distinguish between 1: binary, octal, decimal, hex;
   7: octal, decimal, ...
** TODO getting indeterminacy; can do arbitrarily complex regexps
   for the first pass, and employ secondary parsers to deal with, say,
   numbers.
* DONE (parser) taking care of most of the complexity via regexps in the lexer
  CLOSED: [2009-06-15 Mon 23:11]
  - CLOSING NOTE [2009-06-15 Mon 23:11] \\
    number parsers, etc.
  is probably quicker, even though it's less readable.
* CANCELED worry about number precision via GMP? http://us3.php.net/gmp
  CLOSED: [2009-06-15 Mon 23:11]
** php's GMP doesn't do floats
* CANCELED unified function that parses and evaluates; fuck the class: sphuck()
  CLOSED: [2009-06-15 Mon 23:11]
** TODO one for files, too: load() or fsphuck() or something
* DONE recursive closures
  CLOSED: [2009-04-13 Mon 01:18]
  - CLOSING NOTE [2009-04-13 Mon 01:20] \\
    thanks, Justin Martin; http://marc.info/?l=php-internals&m=123960965909314&w=2
* TODO some sort of evaluator instantiation a la class?
* TODO error() should catch the errors from within scheme; to allow for
  error catching, etc.; but also: no reason to bail out on the
  interpreter on account of a php error.
* DONE either find a way to apply values from scheme, or have a set of
  primitive procedures (primitive_car, primitive_add, ...) that take a
  scheme-list of values. alternatively, scheme_value_to_array and
  call_user_func_array. on the other hand: breaks the immediate
  scheme->php function-name mapping (important?).
  CLOSED: [2009-04-12 Sun 22:06]
  - CLOSING NOTE [2009-04-12 Sun 22:06] \\ decided on orthogonal
    primitive_* functions for now; benchmark with value->array
    application?
** TODO nope: every time we get a value, it's wrapped in a list; simple
   list->array should suffice for value unpacking, regardless of
   contained types.
* TODO scheval handles as special cases things that could be macroized:
  quote, unquote, if, cond, etc.
* TODO name-munging and resort to primitive procedures without needing
  to register them in $primitive_procedures?
* TODO some mechanism for translating scheme values to php
* DONE parser persistance with read()?
  CLOSED: [2009-06-15 Mon 23:10]
* TODO general scheme file for things like type predicates, map,
  equality, etc.?
* DONE [#A] symbol() function that memoizes symbols?
  CLOSED: [2009-04-12 Sun 13:42]
  - CLOSING NOTE [2009-04-12 Sun 13:42]
** DONE each type to have memoizing constructor: Boolean -> boolean(),
   CLOSED: [2009-04-12 Sun 13:41]
   - CLOSING NOTE [2009-04-12 Sun 13:42] \\
     not yet char, vector, pair; but lst
   String -> string(), Number -> number(), Char -> char(), Vector ->
   vector(), ...? What about Pair -> pair(): immutable pairs?
* CANCELED implement the solved exercises as opposed to feral book.
  CLOSED: [2009-06-15 Mon 23:09]
  - CLOSING NOTE [2009-06-15 Mon 23:10] \\
    go directly from r5rs
* DONE TRUE and FALSE singletons?
  CLOSED: [2009-04-12 Sun 13:42]
  - CLOSING NOTE [2009-04-12 Sun 13:42] \\
    global $true/$false, as well as boolean() memoization
* TODO some things made more elegant: dispatch on type, etc.; inner
  functions.
* TODO might need an actual Nil type so we can do things like
  is_eq(Nil, Nil) by dispatching on class.
* TODO distinguish between constants created with QUOTE and constructed
  values?
* CANCELED why make an exception for the schemish COND and IF, if includeth
  CLOSED: [2009-04-12 Sun 13:43]
  - CLOSING NOTE [2009-04-12 Sun 13:43] \\
    distinguish between working with quasi-scheme in php and scheme
  CONS, etc.? control structures are superfluous?
* DONE quote mechanism is mysterious: quote(<string>) -> symbol;
  quote(<number>) -> number; quote(<list>) -> list; quote(<vector>) ->
  vector? problem is: quote(<string>) -> string; no way to distinguish
  between symbols and strings in php except with recourse to their
  quasi-scheme types.
  CLOSED: [2009-04-13 Mon 01:08]
  - CLOSING NOTE [2009-04-13 Mon 01:18] \\ quote can be implemented in
    scheme (as a macro?) or an interpreter extension to avoid the
    string/symbol ambiguity
* DONE write a quasi-scheme in PHP, such that the metacirc runs almost
  unaltered; may be slower than some PHP-centric strategy, but sphuck
  it!
  CLOSED: [2009-04-12 Sun 13:43]
  - CLOSING NOTE [2009-04-12 Sun 13:44] \\
    did indeed that; may opt for machine later a la ch. 5?
* DONE environments with non-destructive merging
  CLOSED: [2009-04-12 Sun 13:44]
  - CLOSING NOTE [2009-04-12 Sun 13:44] \\
    for free with metacirc
* TODO type stack with numbers (imaginary component; how to distinguish
  between exact (rational: num/denom) and inexact (float): subclasses
  of number? does each (exact, inexact) have imaginary components?)
* DONE use r5rs 7.1 to inform the lexer/parser; we're lacking booleans,
  CLOSED: [2009-06-15 Mon 23:09]
  - CLOSING NOTE [2009-06-15 Mon 23:09] \\
    done; having problems with READ, though
  vectors, etc.
* DONE README
  CLOSED: [2009-06-15 Mon 23:09]
  - CLOSING NOTE [2009-06-15 Mon 23:09] \\
    done, in some capacity
* TODO sphuck namespace for lexer/parser
